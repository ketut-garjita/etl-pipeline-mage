{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.6", "generated_at": "2025-08-19T03:44:35.815066Z", "invocation_id": "b61c353f-feac-451f-9695-2b488f7744e4", "invocation_started_at": "2025-08-19T03:44:30.651240Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T03:44:33.750642Z", "completed_at": "2025-08-19T03:44:33.828558Z"}, {"name": "execute", "started_at": "2025-08-19T03:44:33.846794Z", "completed_at": "2025-08-19T03:44:34.524031Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.7859148979187012, "adapter_response": {"_message": "SELECT 270", "code": "SELECT", "rows_affected": 270}, "message": "SELECT 270", "failures": null, "unique_id": "model.data_pipeline.mart_financial_commitments", "compiled": true, "compiled_code": "\n\n\nWITH order_aggregates AS (\n    SELECT\n        o.department_id,\n        o.product_card_id,\n        SUM(o.order_item_total) AS total_committed_funds,\n        SUM(CASE WHEN o.order_status = 'COMPLETED' THEN 1 ELSE 0 END) AS completed_orders,\n        COUNT(1) AS total_orders\n    FROM (SELECT department_id, product_card_id, order_item_total, order_status FROM \"etl\".\"gold\".\"fact_order\" LIMIT 50000) o\n    GROUP BY o.department_id, o.product_card_id\n),\ndepartment_market_category AS (\n    SELECT\n        d.department_name,\n        d.market,\n        p.category_name,\n        oa.total_committed_funds,\n        oa.completed_orders,\n        oa.total_orders\n    FROM order_aggregates oa\n    JOIN (SELECT department_id, department_name, market FROM \"etl\".\"gold\".\"dim_department\" LIMIT 50000) d\n      ON oa.department_id = d.department_id\n    JOIN (SELECT product_card_id, category_name FROM \"etl\".\"gold\".\"dim_product\" LIMIT 50000) p\n      ON oa.product_card_id = p.product_card_id\n)\nSELECT\n    department_name,\n    market,\n    category_name,\n    total_committed_funds,\n    completed_orders / total_orders AS commitment_fulfillment_rate\nFROM department_market_category", "relation_name": "\"etl\".\"gold\".\"mart_financial_commitments\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T03:44:33.830806Z", "completed_at": "2025-08-19T03:44:33.941377Z"}, {"name": "execute", "started_at": "2025-08-19T03:44:33.964745Z", "completed_at": "2025-08-19T03:44:34.675332Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.9153182506561279, "adapter_response": {"_message": "SELECT 20652", "code": "SELECT", "rows_affected": 20652}, "message": "SELECT 20652", "failures": null, "unique_id": "model.data_pipeline.mart_fraud_detection", "compiled": true, "compiled_code": "\n\nwith fraud_detection AS (\n    SELECT\n        order_customer_id,\n        AVG(order_item_total) AS avg_order_total,\n        COUNT(*) AS num_orders\n    FROM \"etl\".\"gold\".\"fact_order\"\n    GROUP BY order_customer_id\n    ORDER BY avg_order_total DESC\n)\n\nselect * from fraud_detection", "relation_name": "\"etl\".\"gold\".\"mart_fraud_detection\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T03:44:34.690705Z", "completed_at": "2025-08-19T03:44:34.701837Z"}, {"name": "execute", "started_at": "2025-08-19T03:44:34.704427Z", "completed_at": "2025-08-19T03:44:34.868753Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.18403267860412598, "adapter_response": {"_message": "SELECT 4", "code": "SELECT", "rows_affected": 4}, "message": "SELECT 4", "failures": null, "unique_id": "model.data_pipeline.mart_payment_delays", "compiled": true, "compiled_code": "\nselect\n    delivery_status,\n    AVG(days_for_shipping_real - days_for_shipment_scheduled) AS avg_payment_delay,\n    COUNT(1) AS count_of_orders\nFROM \"etl\".\"gold\".\"dim_shipping\"\nGROUP BY delivery_status", "relation_name": "\"etl\".\"gold\".\"mart_payment_delays\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T03:44:34.541823Z", "completed_at": "2025-08-19T03:44:34.554552Z"}, {"name": "execute", "started_at": "2025-08-19T03:44:34.556212Z", "completed_at": "2025-08-19T03:44:35.356976Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.8211147785186768, "adapter_response": {"_message": "SELECT 37", "code": "SELECT", "rows_affected": 37}, "message": "SELECT 37", "failures": null, "unique_id": "model.data_pipeline.mart_overall_performance", "compiled": true, "compiled_code": "\n\nWITH month_names AS (\n    SELECT 1 AS month_num, 'January' AS month_name UNION ALL\n    SELECT 2, 'February' UNION ALL\n    SELECT 3, 'March' UNION ALL\n    SELECT 4, 'April' UNION ALL\n    SELECT 5, 'May' UNION ALL\n    SELECT 6, 'June' UNION ALL\n    SELECT 7, 'July' UNION ALL\n    SELECT 8, 'August' UNION ALL\n    SELECT 9, 'September' UNION ALL\n    SELECT 10, 'October' UNION ALL\n    SELECT 11, 'November' UNION ALL\n    SELECT 12, 'December'\n),\noverall_sales_performance AS (\n    SELECT \n        EXTRACT(YEAR FROM order_date) AS year,\n        EXTRACT(MONTH FROM order_date) AS month,\n        ROUND(SUM(order_item_total)::numeric, 2) AS total_sales,\n        ROUND(SUM(order_profit_per_order)::numeric, 2) AS total_profit\n    FROM \"etl\".\"gold\".\"fact_order\"\n    GROUP BY year, month\n),\nprofit_margin_analysis AS (\n    SELECT \n        EXTRACT(YEAR FROM order_date) AS year,\n        EXTRACT(MONTH FROM order_date) AS month,\n        ROUND(AVG(order_profit_per_order)::numeric, 2) AS avg_profit_margin\n    FROM \"etl\".\"gold\".\"fact_order\"\n    GROUP BY year, month\n),\noperational_efficiency_metrics AS (\n    SELECT \n        ROUND(AVG(days_for_shipping_real)::numeric, 2) AS avg_actual_shipment_days,\n        ROUND(AVG(days_for_shipment_scheduled)::numeric, 2) AS avg_scheduled_shipment_days\n    FROM \"etl\".\"gold\".\"dim_shipping\"\n)\nSELECT \n    os.year,\n    m.month_name,\n    os.total_sales,\n    os.total_profit,\n    pma.avg_profit_margin,\n    oem.avg_actual_shipment_days,\n    oem.avg_scheduled_shipment_days\nFROM \n    overall_sales_performance os\nJOIN \n    profit_margin_analysis pma ON os.year = pma.year AND os.month = pma.month\nJOIN\n    month_names m ON os.month = m.month_num\nCROSS JOIN \n    operational_efficiency_metrics oem\nORDER BY \n    os.year, os.month", "relation_name": "\"etl\".\"gold\".\"mart_overall_performance\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T03:44:33.788796Z", "completed_at": "2025-08-19T03:44:33.842735Z"}, {"name": "execute", "started_at": "2025-08-19T03:44:33.866831Z", "completed_at": "2025-08-19T03:44:35.453043Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7258796691894531, "adapter_response": {"_message": "SELECT 37", "code": "SELECT", "rows_affected": 37}, "message": "SELECT 37", "failures": null, "unique_id": "model.data_pipeline.mart_customer_retention_rate", "compiled": true, "compiled_code": "WITH month_names AS (\n    SELECT 1 AS month_num, 'January' AS month_name UNION ALL\n    SELECT 2, 'February' UNION ALL\n    SELECT 3, 'March' UNION ALL\n    SELECT 4, 'April' UNION ALL\n    SELECT 5, 'May' UNION ALL\n    SELECT 6, 'June' UNION ALL\n    SELECT 7, 'July' UNION ALL\n    SELECT 8, 'August' UNION ALL\n    SELECT 9, 'September' UNION ALL\n    SELECT 10, 'October' UNION ALL\n    SELECT 11, 'November' UNION ALL\n    SELECT 12, 'December'\n),\nmonthly_customers AS (\n    SELECT\n        EXTRACT(YEAR FROM order_date) AS year,\n        EXTRACT(MONTH FROM order_date) AS month,\n        COUNT(DISTINCT order_customer_id) AS distinct_customers\n    FROM\n        \"etl\".\"gold\".\"fact_order\"\n    GROUP BY\n        year, month\n)\nSELECT\n    year,\n    mo.month_name,\n    distinct_customers,\n    SUM(distinct_customers) OVER (ORDER BY year, month) AS rolling_customers,\n    round(distinct_customers/(SUM(distinct_customers) OVER (ORDER BY year, month)),2) as customer_retention_rate\nFROM\n    monthly_customers m\nJOIN month_names mo on m.month = mo.month_num\nORDER BY\n    year, month\n\n", "relation_name": "\"etl\".\"gold\".\"mart_customer_retention_rate\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T03:44:33.805972Z", "completed_at": "2025-08-19T03:44:33.864687Z"}, {"name": "execute", "started_at": "2025-08-19T03:44:33.885099Z", "completed_at": "2025-08-19T03:44:35.737412Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.9935050010681152, "adapter_response": {"_message": "SELECT 37", "code": "SELECT", "rows_affected": 37}, "message": "SELECT 37", "failures": null, "unique_id": "model.data_pipeline.mart_inventory_levels", "compiled": true, "compiled_code": "\n\nWITH month_names AS (\n    SELECT 1 AS month_num, 'January' AS month_name UNION ALL\n    SELECT 2, 'February' UNION ALL\n    SELECT 3, 'March' UNION ALL\n    SELECT 4, 'April' UNION ALL\n    SELECT 5, 'May' UNION ALL\n    SELECT 6, 'June' UNION ALL\n    SELECT 7, 'July' UNION ALL\n    SELECT 8, 'August' UNION ALL\n    SELECT 9, 'September' UNION ALL\n    SELECT 10, 'October' UNION ALL\n    SELECT 11, 'November' UNION ALL\n    SELECT 12, 'December'\n),\ntotal_inventory_value AS (\n    SELECT\n        EXTRACT(YEAR FROM order_date) AS year,\n        EXTRACT(MONTH FROM order_date) AS month,\n        ROUND(SUM(order_item_product_price * order_item_quantity)::numeric, 2) AS total_inventory_value\n    FROM\n        \"etl\".\"gold\".\"fact_order\"\n    GROUP BY\n        year, month\n),\ninventory_turnover AS (\n    SELECT\n        EXTRACT(YEAR FROM order_date) AS year,\n        EXTRACT(MONTH FROM order_date) AS month,\n        ROUND((SUM(order_item_total)::numeric / NULLIF(AVG(order_item_quantity)::numeric, 0)), 2) AS inventory_turnover_ratio\n    FROM \n        \"etl\".\"gold\".\"fact_order\"\n    GROUP BY \n        year, month\n),\ninventory_aging AS (\n    SELECT \n        EXTRACT(YEAR FROM order_date) AS year,\n        EXTRACT(MONTH FROM order_date) AS month,\n        CASE\n            WHEN EXTRACT(DAY FROM AGE(order_date, DATE '2018-01-01')) <= 30 THEN '0-30 days'\n            WHEN EXTRACT(DAY FROM AGE(order_date, DATE '2018-01-01')) <= 60 THEN '31-60 days'\n            WHEN EXTRACT(DAY FROM AGE(order_date, DATE '2018-01-01')) <= 90 THEN '61-90 days'\n            ELSE 'Over 90 days'\n        END AS age_range,\n        ROUND(SUM(order_item_product_price * order_item_quantity)::numeric, 2) AS inventory_value\n    FROM \n        \"etl\".\"gold\".\"fact_order\"\n    GROUP BY \n        year, month, age_range\n)\n\nSELECT\n    t.year,\n    m.month_name,\n    t.total_inventory_value,\n    i.inventory_turnover_ratio,\n    a.age_range,\n    a.inventory_value\nFROM \n    total_inventory_value t\nJOIN \n    month_names m ON t.month = m.month_num\nJOIN \n    inventory_turnover i ON t.year = i.year AND t.month = i.month\nLEFT JOIN\n    inventory_aging a ON t.year = a.year AND t.month = a.month\nORDER BY \n    t.year, t.month", "relation_name": "\"etl\".\"gold\".\"mart_inventory_levels\"", "batch_results": null}], "elapsed_time": 2.734365701675415, "args": {"partial_parse_file_diff": true, "log_format": "default", "defer": false, "cache_selected_only": false, "require_resource_names_without_spaces": true, "vars": {}, "state_modified_compare_vars": false, "version_check": true, "profiles_dir": "/home/src/dataeng-2/dbt/dbt-postgres", "log_path": "/home/src/dataeng-2/dbt/dbt-postgres/logs", "select": ["marts"], "use_colors_file": true, "static_parser": true, "indirect_selection": "eager", "log_format_file": "debug", "exclude": [], "require_all_warnings_handled_by_warn_error": false, "use_fast_test_edges": false, "quiet": false, "require_generic_test_arguments_property": false, "show_all_deprecations": false, "warn_error_options": {"error": [], "warn": [], "silence": []}, "favor_state": false, "send_anonymous_usage_stats": true, "require_yaml_configuration_for_mf_time_spines": false, "show_resource_report": false, "write_json": true, "log_level_file": "debug", "invocation_command": "dbt run -s marts", "state_modified_compare_more_unrendered_values": false, "upload_to_artifacts_ingest_api": false, "populate_cache": true, "macro_debugging": false, "print": true, "strict_mode": false, "partial_parse": true, "require_nested_cumulative_type_params": false, "empty": false, "log_file_max_bytes": 10485760, "project_dir": "/home/src/dataeng-2/dbt/dbt-postgres", "use_colors": true, "require_batched_execution_for_custom_microbatch_strategy": false, "which": "run", "printer_width": 80, "introspect": true, "require_explicit_package_overrides_for_builtin_materializations": true, "log_level": "info", "source_freshness_run_project_hooks": true, "skip_nodes_if_on_run_start_fails": false, "validate_macro_args": false}}