{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.6", "generated_at": "2025-08-24T14:47:51.041908Z", "invocation_id": "6d26327b-412c-4c70-8ffb-fefcf6aef256", "invocation_started_at": "2025-08-24T14:47:43.830229Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-24T14:47:49.302026Z", "completed_at": "2025-08-24T14:47:49.379863Z"}, {"name": "execute", "started_at": "2025-08-24T14:47:49.389808Z", "completed_at": "2025-08-24T14:47:49.993467Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.7059152126312256, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.data_pipeline.mart_customer_retention_rate", "compiled": true, "compiled_code": "\n\nWITH month_names AS (\n    SELECT 1 AS month_num, 'January' AS month_name UNION ALL\n    SELECT 2, 'February' UNION ALL\n    SELECT 3, 'March' UNION ALL\n    SELECT 4, 'April' UNION ALL\n    SELECT 5, 'May' UNION ALL\n    SELECT 6, 'June' UNION ALL\n    SELECT 7, 'July' UNION ALL\n    SELECT 8, 'August' UNION ALL\n    SELECT 9, 'September' UNION ALL\n    SELECT 10, 'October' UNION ALL\n    SELECT 11, 'November' UNION ALL\n    SELECT 12, 'December'\n),\nmonthly_customers AS (\n    SELECT\n        toYear(parseDateTimeBestEffort(order_date)) AS year,\n        toMonth(parseDateTimeBestEffort(order_date)) AS month,\n        COUNTDistinct(order_customer_id) AS distinct_customers\n    FROM\n        `etl`.`fact_order`\n    GROUP BY\n        year, month\n)\nSELECT\n    year,\n    mo.month_name,\n    distinct_customers,\n    SUM(distinct_customers) OVER (ORDER BY year, month) AS rolling_customers,\n    round(distinct_customers/(SUM(distinct_customers) OVER (ORDER BY year, month)),2) as customer_retention_rate\nFROM\n    monthly_customers m\nJOIN month_names mo on m.month = mo.month_num\nORDER BY\n    year, month", "relation_name": "`etl`.`mart_customer_retention_rate`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-24T14:47:50.015886Z", "completed_at": "2025-08-24T14:47:50.031291Z"}, {"name": "execute", "started_at": "2025-08-24T14:47:50.032742Z", "completed_at": "2025-08-24T14:47:50.256397Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.24487686157226562, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.data_pipeline.mart_financial_commitments", "compiled": true, "compiled_code": "\n\nWITH order_aggregates AS (\n    SELECT \n        o.department_id,\n        o.product_card_id,\n        SUM(o.order_item_total) AS total_committed_funds,\n        SUMIf(1, o.order_status = 'COMPLETED') AS completed_orders,\n        COUNT() AS total_orders\n    FROM `etl`.`fact_order` o\n    GROUP BY o.department_id, o.product_card_id\n),\ndepartment_market_category AS (\n    SELECT \n        d.department_name,\n        d.market,\n        p.category_name,\n        oa.total_committed_funds,\n        oa.completed_orders,\n        oa.total_orders\n    FROM order_aggregates oa\n    INNER JOIN `etl`.`dim_department` d \n        ON CAST(oa.department_id AS String) = d.department_id\n    INNER JOIN `etl`.`dim_product` p \n        ON oa.product_card_id = p.product_card_id\n)\nSELECT\n    department_name,\n    market,\n    category_name,\n    total_committed_funds,\n    completed_orders / total_orders AS commitment_fulfillment_rate\nFROM department_market_category", "relation_name": "`etl`.`mart_financial_commitments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-24T14:47:50.268490Z", "completed_at": "2025-08-24T14:47:50.284753Z"}, {"name": "execute", "started_at": "2025-08-24T14:47:50.286102Z", "completed_at": "2025-08-24T14:47:50.394013Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12830328941345215, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.data_pipeline.mart_fraud_detection", "compiled": true, "compiled_code": "\n\nwith fraud_detection AS (\n    SELECT\n        order_customer_id,\n        AVG(order_item_total) AS avg_order_total,\n        COUNT(*) AS num_orders\n    FROM `etl`.`fact_order`\n    GROUP BY order_customer_id\n)\n\nselect * from fraud_detection", "relation_name": "`etl`.`mart_fraud_detection`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-24T14:47:50.405770Z", "completed_at": "2025-08-24T14:47:50.417582Z"}, {"name": "execute", "started_at": "2025-08-24T14:47:50.418706Z", "completed_at": "2025-08-24T14:47:50.655643Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.25298619270324707, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.data_pipeline.mart_inventory_levels", "compiled": true, "compiled_code": "\n\nWITH month_names AS (\n    SELECT 1 AS month_num, 'January' AS month_name\n    UNION ALL SELECT 2, 'February'\n    UNION ALL SELECT 3, 'March'\n    UNION ALL SELECT 4, 'April'\n    UNION ALL SELECT 5, 'May'\n    UNION ALL SELECT 6, 'June'\n    UNION ALL SELECT 7, 'July'\n    UNION ALL SELECT 8, 'August'\n    UNION ALL SELECT 9, 'September'\n    UNION ALL SELECT 10, 'October'\n    UNION ALL SELECT 11, 'November'\n    UNION ALL SELECT 12, 'December'\n),\ntotal_inventory_value AS (\n    SELECT\n        toYear(parseDateTimeBestEffort(order_date)) AS year,\n        toMonth(parseDateTimeBestEffort(order_date)) AS month,\n        ROUND(SUM(order_item_product_price * order_item_quantity), 2) AS total_inventory_value\n    FROM `etl`.`fact_order`\n    GROUP BY year, month\n),\ninventory_turnover AS (\n    SELECT\n        toYear(parseDateTimeBestEffort(order_date)) AS year,\n        toMonth(parseDateTimeBestEffort(order_date)) AS month,\n        ROUND(SUM(order_item_total) / NULLIF(AVG(order_item_quantity), 0), 2) AS inventory_turnover_ratio\n    FROM `etl`.`fact_order`\n    GROUP BY year, month\n),\ninventory_aging AS (\n    SELECT \n        toYear(parseDateTimeBestEffort(order_date)) AS year,\n        toMonth(parseDateTimeBestEffort(order_date)) AS month,\n        CASE\n            WHEN dateDiff('day', parseDateTimeBestEffort(order_date), toDate('2018-01-01')) <= 30 THEN '0-30 days'\n            WHEN dateDiff('day', parseDateTimeBestEffort(order_date), toDate('2018-01-01')) <= 60 THEN '31-60 days'\n            WHEN dateDiff('day', parseDateTimeBestEffort(order_date), toDate('2018-01-01')) <= 90 THEN '61-90 days'\n            ELSE 'Over 90 days'\n        END AS age_range,\n        ROUND(SUM(order_item_product_price * order_item_quantity), 2) AS inventory_value\n    FROM `etl`.`fact_order`\n    GROUP BY year, month, age_range\n)\n\nSELECT\n    t.year,\n    m.month_name,\n    t.total_inventory_value,\n    i.inventory_turnover_ratio,\n    a.age_range,\n    a.inventory_value\nFROM total_inventory_value t\nJOIN month_names m ON t.month = m.month_num\nJOIN inventory_turnover i ON t.year = i.year AND t.month = i.month\nLEFT JOIN inventory_aging a ON t.year = a.year AND t.month = a.month\nORDER BY t.year, t.month", "relation_name": "`etl`.`mart_inventory_levels`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-24T14:47:50.669454Z", "completed_at": "2025-08-24T14:47:50.682525Z"}, {"name": "execute", "started_at": "2025-08-24T14:47:50.684301Z", "completed_at": "2025-08-24T14:47:50.875147Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.20914387702941895, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.data_pipeline.mart_overall_performance", "compiled": true, "compiled_code": "\n\nWITH month_names AS (\n    SELECT 1 AS month_num, 'January' AS month_name\n    UNION ALL SELECT 2, 'February'\n    UNION ALL SELECT 3, 'March'\n    UNION ALL SELECT 4, 'April'\n    UNION ALL SELECT 5, 'May'\n    UNION ALL SELECT 6, 'June'\n    UNION ALL SELECT 7, 'July'\n    UNION ALL SELECT 8, 'August'\n    UNION ALL SELECT 9, 'September'\n    UNION ALL SELECT 10, 'October'\n    UNION ALL SELECT 11, 'November'\n    UNION ALL SELECT 12, 'December'\n),\noverall_sales_performance AS (\n    SELECT \n        toYear(parseDateTimeBestEffort(order_date)) AS year,\n        toMonth(parseDateTimeBestEffort(order_date)) AS month,\n        ROUND(SUM(order_item_total), 2) AS total_sales,\n        ROUND(SUM(order_profit_per_order), 2) AS total_profit\n    FROM `etl`.`fact_order`\n    GROUP BY year, month\n),\nprofit_margin_analysis AS (\n    SELECT \n        toYear(parseDateTimeBestEffort(order_date)) AS year,\n        toMonth(parseDateTimeBestEffort(order_date)) AS month,\n        ROUND(AVG(order_profit_per_order), 2) AS avg_profit_margin\n    FROM `etl`.`fact_order`\n    GROUP BY year, month\n),\noperational_efficiency_metrics AS (\n    SELECT \n        ROUND(AVG(days_for_shipping_real), 2) AS avg_actual_shipment_days,\n        ROUND(AVG(days_for_shipment_scheduled), 2) AS avg_scheduled_shipment_days\n    FROM `etl`.`dim_shipping`\n)\nSELECT \n    os.year,\n    os.month,  -- TAMBAHKAN KOLOM month\n    m.month_name,\n    os.total_sales,\n    os.total_profit,\n    pma.avg_profit_margin,\n    oem.avg_actual_shipment_days,\n    oem.avg_scheduled_shipment_days\nFROM overall_sales_performance os\nJOIN profit_margin_analysis pma ON os.year = pma.year AND os.month = pma.month\nJOIN month_names m ON os.month = m.month_num\nCROSS JOIN operational_efficiency_metrics oem\nORDER BY os.year, os.month", "relation_name": "`etl`.`mart_overall_performance`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-24T14:47:50.888534Z", "completed_at": "2025-08-24T14:47:50.899763Z"}, {"name": "execute", "started_at": "2025-08-24T14:47:50.901619Z", "completed_at": "2025-08-24T14:47:51.022842Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13724160194396973, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.data_pipeline.mart_payment_delays", "compiled": true, "compiled_code": "\nselect\n    delivery_status,\n    AVG(days_for_shipping_real - days_for_shipment_scheduled) AS avg_payment_delay,\n    COUNT(1) AS count_of_orders\nFROM `etl`.`dim_shipping`\nGROUP BY delivery_status", "relation_name": "`etl`.`mart_payment_delays`", "batch_results": null}], "elapsed_time": 2.879969835281372, "args": {"use_colors_file": true, "require_nested_cumulative_type_params": false, "select": ["marts"], "use_fast_test_edges": false, "which": "run", "cache_selected_only": false, "macro_debugging": false, "require_batched_execution_for_custom_microbatch_strategy": false, "log_path": "/app/dbt-clickhouse/logs", "source_freshness_run_project_hooks": true, "log_format_file": "debug", "require_resource_names_without_spaces": true, "printer_width": 80, "log_file_max_bytes": 10485760, "profiles_dir": "/app/dbt-clickhouse", "upload_to_artifacts_ingest_api": false, "vars": {}, "require_generic_test_arguments_property": false, "use_colors": true, "log_level_file": "debug", "indirect_selection": "eager", "send_anonymous_usage_stats": true, "partial_parse": true, "quiet": false, "log_level": "info", "require_explicit_package_overrides_for_builtin_materializations": true, "partial_parse_file_diff": true, "state_modified_compare_more_unrendered_values": false, "empty": false, "require_yaml_configuration_for_mf_time_spines": false, "invocation_command": "dbt run -s marts", "project_dir": "/app/dbt-clickhouse", "log_format": "default", "skip_nodes_if_on_run_start_fails": false, "show_resource_report": false, "strict_mode": false, "print": true, "static_parser": true, "version_check": true, "favor_state": false, "show_all_deprecations": false, "populate_cache": true, "require_all_warnings_handled_by_warn_error": false, "defer": false, "exclude": [], "validate_macro_args": false, "warn_error_options": {"error": [], "warn": [], "silence": []}, "introspect": true, "write_json": true, "state_modified_compare_vars": false}}